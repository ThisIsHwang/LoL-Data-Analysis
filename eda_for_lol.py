# -*- coding: utf-8 -*-
"""롤eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ypzqeUR2al-g1BfqqJG-SSnHcBuXIHBv
"""

# This is a sample Python script.

import pandas as pd
import pickle
import matplotlib.pyplot as plt
import numpy as np
import sys
import os
from pandas import json_normalize
import seaborn as sns

print(os.getcwd())

lol_df = pd.read_csv("/content/drive/MyDrive/diamond_real.csv", encoding="UTF-8")
lol_df

lol_df.isnull()
lol_df.isnull().sum() #널값 확인

lol_df.duplicated().sum() #중복삭제

lol_df.drop_duplicates()

import json
import pprint as pp
team_a_error = []
team_b_error = []
team_a = pd.DataFrame()

team_b = pd.DataFrame()


#print(lol_df['teams'].iloc[0].replace("'", '\"').replace('}]}"},', '}]}"}'))

for i in range(len(lol_df)):
    if i % 1000 == 0:
        print(str(i)+'행 처리중')
    try:
        d = eval(lol_df['teams'].iloc[i].replace("'", '\"'))
        jsonString = json.dumps(d)
        team_dict= json.loads(jsonString)
        team_a = team_a.append(json_normalize(team_dict[0]))
        team_b = team_b.append(json_normalize(team_dict[1]))
    except:
        team_a_error.append(i)
        team_b_error.append(i)
        print(str(i)+'행에서 오류')
        pass
team_a.reset_index(drop = False, inplace = True)
team_b.reset_index(drop = False, inplace = True)
lol_df = lol_df.drop(index = team_a_error)

team_a



# 팀a와 팀 b의 승패가 반대인지 데이터 정합성 검정 -> 모두 반대임을 확인
teamErrorIdxList = []
for i in range(len(team_a)):
    wf_valid = team_a['win'].iloc[i]
    
    if team_b['win'].iloc[i] != wf_valid:
        pass
    else:
        # print(team_a.iloc[i])
        # print(team_b.iloc[i])
        print(str(i)+'행 데이터 정합성 문제')
        teamErrorIdxList.append(i)
        
team_a = team_a.drop(teamErrorIdxList)
team_b = team_b.drop(teamErrorIdxList)
lol_df = lol_df.drop(teamErrorIdxList)

teamErrorIdxList

team_a

team_b

#각 경기별 게임 시간 병합

team_a['gameDuration'] = lol_df['gameDuration'].tolist()
team_b['gameDuration'] = lol_df['gameDuration'].tolist()

lol_df['gameDuration'].index = range(len(lol_df))
team_a['gameDuration'].index = range(len(team_a))
team_b['gameDuration'].index = range(len(team_b))

game_df = pd.concat([team_a,team_b],axis=0)
game_df

#분석의 용이성을 위해서 타겟 데이터를 제외한 범주형 데이터를 인코딩
'''
True : 1
False : 0
'''
tf_mapping = {True:1,False:0}
bool_column = game_df.select_dtypes('bool').columns.tolist()

for i in bool_column:
    game_df[i] = game_df[i].map(tf_mapping)

game_df

game_df[game_df['win']==1].describe()[['objectives.tower.kills','objectives.inhibitor.kills','objectives.baron.kills','objectives.dragon.kills']]

game_df[game_df['win']==0].describe()[['objectives.tower.kills','objectives.inhibitor.kills','objectives.baron.kills','objectives.dragon.kills']]

def first_valid_visualize(df,variable):
    plt.bar(['win', 'lose'], [df[df['win']==1][variable].mean(), df[df['win']==0][variable].mean()])
    plt.title(variable + " ratio")
    plt.show()

first_valid_visualize(game_df,'objectives.champion.first')

first_valid_visualize(game_df,'objectives.tower.first')

first_valid_visualize(game_df,'objectives.inhibitor.first')

first_valid_visualize(game_df,'objectives.baron.first')

game_df['game_time'] = game_df['gameDuration']/60

x = [i for i in range(15, 41, 5)]
game_parts = list()
for i, xx in enumerate(x):
  game_parts.append(game_df[(xx <= game_df['game_time']) &(game_df['game_time']<xx + 5)])

def time_ratio():
    fig = plt.figure()
    fig.suptitle('game time ratio',size = 30)
    sns.kdeplot(data=game_df['game_time'])

time_ratio()







game_parts[0]

x = [i for i in range(15, 41, 5)]
print(x)
#y = [game_part1[game_part1["win"] == 1]["objectives.inhibitor.first"].mean(), game_part2[game_part2["win"] == 1]["objectives.inhibitor.first"].mean(), game_part3[game_part3["win"] == 1]["objectives.inhibitor.first"].mean()]
y = [g[g["win"] == 1]["objectives.inhibitor.first"].mean() for g in game_parts]
print(y)
sns.lineplot(x=x, y=y)

x = [i for i in range(15, 41, 5)]
print(x)
#y = [game_part1[game_part1["win"] == 1]["objectives.inhibitor.first"].mean(), game_part2[game_part2["win"] == 1]["objectives.inhibitor.first"].mean(), game_part3[game_part3["win"] == 1]["objectives.inhibitor.first"].mean()]
y = [g[g["win"] == 1]["objectives.champion.first"].mean() for g in game_parts]
print(y)
sns.lineplot(x=x, y=y)

x = [i for i in range(15, 41, 5)]
print(x)
#y = [game_part1[game_part1["win"] == 1]["objectives.inhibitor.first"].mean(), game_part2[game_part2["win"] == 1]["objectives.inhibitor.first"].mean(), game_part3[game_part3["win"] == 1]["objectives.inhibitor.first"].mean()]
y = [g[g["win"] == 1]["objectives.tower.first"].mean() for g in game_parts]
print(y)
sns.lineplot(x=x, y=y)

x = [i for i in range(15, 41, 5)]
print(x)
#y = [game_part1[game_part1["win"] == 1]["objectives.inhibitor.first"].mean(), game_part2[game_part2["win"] == 1]["objectives.inhibitor.first"].mean(), game_part3[game_part3["win"] == 1]["objectives.inhibitor.first"].mean()]
y = [g[g["win"] == 1]["objectives.baron.first"].mean() for g in game_parts]
print(y)
sns.lineplot(x=x, y=y)

x = [i for i in range(15, 41, 5)]
print(x)
#y = [game_part1[game_part1["win"] == 1]["objectives.inhibitor.first"].mean(), game_part2[game_part2["win"] == 1]["objectives.inhibitor.first"].mean(), game_part3[game_part3["win"] == 1]["objectives.inhibitor.first"].mean()]
y = [g[g["win"] == 1]["objectives.riftHerald.first"].mean() for g in game_parts]
print(y)
sns.lineplot(x=x, y=y)



